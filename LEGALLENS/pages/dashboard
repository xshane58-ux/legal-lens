
import React, { useState, useEffect, useCallback } from "react";
import { LegalDocument, User } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  FileText, 
  AlertTriangle, 
  Shield, 
  TrendingUp,
  Search,
  Filter,
  Plus,
  Eye,
  Download,
  Trash2
} from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";
import { format } from "date-fns";

export default function Dashboard() {
  const [documents, setDocuments] = useState([]);
  const [filteredDocs, setFilteredDocs] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all");
  const [filterRisk, setFilterRisk] = useState("all");
  const [deletingId, setDeletingId] = useState(null);
  const [stats, setStats] = useState({
    totalDocs: 0,
    redFlags: 0,
    avgRisk: 0,
    recentAnalysis: 0
  });

  const calculateStats = (docs) => {
    const totalRedFlags = docs.reduce((sum, doc) => sum + (doc.red_flags?.length || 0), 0);
    const avgRisk = docs.length > 0 
      ? docs.reduce((sum, doc) => sum + (doc.risk_score || 0), 0) / docs.length 
      : 0;
    const recent = docs.filter(doc => {
      const daysDiff = (new Date() - new Date(doc.created_date)) / (1000 * 60 * 60 * 24);
      return daysDiff <= 7;
    }).length;

    setStats({
      totalDocs: docs.length,
      redFlags: totalRedFlags,
      avgRisk: Math.round(avgRisk),
      recentAnalysis: recent
    });
  };

  const loadDocuments = useCallback(async () => {
    try {
      const docs = await LegalDocument.list('-created_date');
      setDocuments(docs);
      calculateStats(docs);
    } catch (error) {
      console.error("Failed to load documents:", error);
    }
  }, []); // calculateStats is stable, so no need to add it here. setDocuments and setStats are also stable.

  const applyFilters = useCallback(() => {
    let filtered = documents;

    if (searchTerm) {
      filtered = filtered.filter(doc => 
        doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        doc.document_type.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (filterType !== "all") {
      filtered = filtered.filter(doc => doc.document_type === filterType);
    }

    if (filterRisk !== "all") {
      filtered = filtered.filter(doc => {
        const risk = doc.risk_score || 0;
        switch (filterRisk) {
          case "low": return risk < 25;
          case "medium": return risk >= 25 && risk < 50;
          case "high": return risk >= 50 && risk < 75;
          case "critical": return risk >= 75;
          default: return true;
        }
      });
    }

    setFilteredDocs(filtered);
  }, [documents, searchTerm, filterType, filterRisk]);

  useEffect(() => {
    loadDocuments();
  }, [loadDocuments]); // Now loadDocuments is memoized, so this effect runs only once or when loadDocuments itself changes (which it won't with empty deps)

  useEffect(() => {
    applyFilters();
  }, [applyFilters]); // Now applyFilters is memoized and updates when its dependencies change, triggering this effect.

  const handleDeleteDocument = async (docId, docTitle) => {
    if (!confirm(`Are you sure you want to delete "${docTitle}"? This action cannot be undone.`)) {
      return;
    }

    setDeletingId(docId);
    try {
      await LegalDocument.delete(docId);
      await loadDocuments(); // Reload the list
    } catch (error) {
      console.error("Failed to delete document:", error);
      alert("Failed to delete document. Please try again.");
    }
    setDeletingId(null);
  };

  const getRiskColor = (score) => {
    if (score >= 75) return "bg-red-500";
    if (score >= 50) return "bg-amber-500";
    if (score >= 25) return "bg-yellow-500";
    return "bg-green-500";
  };

  const getRiskLabel = (score) => {
    if (score >= 75) return "Critical";
    if (score >= 50) return "High";
    if (score >= 25) return "Medium";
    return "Low";
  };

  const statCards = [
    {
      title: "Total Documents",
      value: stats.totalDocs.toLocaleString(),
      icon: FileText,
      color: "bg-blue-500",
      change: "+12% this month"
    },
    {
      title: "Red Flags Found",
      value: stats.redFlags.toLocaleString(),
      icon: AlertTriangle,
      color: "bg-red-500",
      change: "Across all documents"
    },
    {
      title: "Average Risk Score",
      value: `${stats.avgRisk}/100`,
      icon: Shield,
      color: stats.avgRisk >= 50 ? "bg-red-500" : "bg-green-500",
      change: getRiskLabel(stats.avgRisk) + " risk level"
    },
    {
      title: "Recent Analysis",
      value: stats.recentAnalysis.toLocaleString(),
      icon: TrendingUp,
      color: "bg-purple-500",
      change: "Past 7 days"
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900">Document Dashboard</h1>
            <p className="text-slate-600 mt-1">Manage and review your analyzed legal documents</p>
          </div>
          <Link to={createPageUrl("Upload")}>
            <Button className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300">
              <Plus className="w-5 h-5 mr-2" />
              Analyze New Document
            </Button>
          </Link>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {statCards.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
            >
              <Card className="bg-white/80 backdrop-blur-sm border-none shadow-lg hover:shadow-xl transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-slate-500 mb-2">{stat.title}</p>
                      <p className="text-2xl md:text-3xl font-bold text-slate-900">{stat.value}</p>
                      <p className="text-xs text-slate-500 mt-1">{stat.change}</p>
                    </div>
                    <div className={`w-12 h-12 ${stat.color} rounded-xl flex items-center justify-center`}>
                      <stat.icon className="w-6 h-6 text-white" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        {/* Filters and Search */}
        <Card className="bg-white/80 backdrop-blur-sm border-none shadow-lg mb-8">
          <CardContent className="p-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
                <Input
                  placeholder="Search documents by title or type..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 h-12"
                />
              </div>
              <div className="flex gap-4">
                <Select value={filterType} onValueChange={setFilterType}>
                  <SelectTrigger className="w-48 h-12">
                    <Filter className="w-4 h-4 mr-2" />
                    <SelectValue placeholder="All Types" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Types</SelectItem>
                    <SelectItem value="rental_agreement">Rental Agreement</SelectItem>
                    <SelectItem value="loan_agreement">Loan Agreement</SelectItem>
                    <SelectItem value="employment_contract">Employment Contract</SelectItem>
                    <SelectItem value="service_agreement">Service Agreement</SelectItem>
                    <SelectItem value="other">Other</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={filterRisk} onValueChange={setFilterRisk}>
                  <SelectTrigger className="w-48 h-12">
                    <Shield className="w-4 h-4 mr-2" />
                    <SelectValue placeholder="All Risk Levels" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Risk Levels</SelectItem>
                    <SelectItem value="low">Low Risk (0-24)</SelectItem>
                    <SelectItem value="medium">Medium Risk (25-49)</SelectItem>
                    <SelectItem value="high">High Risk (50-74)</SelectItem>
                    <SelectItem value="critical">Critical Risk (75+)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Documents List */}
        <Card className="bg-white/80 backdrop-blur-sm border-none shadow-lg">
          <CardHeader>
            <CardTitle className="text-xl">Your Documents ({filteredDocs.length})</CardTitle>
          </CardHeader>
          <CardContent>
            {filteredDocs.length === 0 ? (
              <div className="text-center py-12">
                <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-slate-600 mb-2">No documents found</h3>
                <p className="text-slate-500 mb-4">
                  {documents.length === 0 
                    ? "Start by analyzing your first legal document" 
                    : "Try adjusting your search or filter criteria"}
                </p>
                <Link to={createPageUrl("Upload")}>
                  <Button className="bg-blue-600 hover:bg-blue-700">
                    <Plus className="w-4 h-4 mr-2" />
                    Analyze Document
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="space-y-4">
                {filteredDocs.map((doc, index) => (
                  <motion.div
                    key={doc.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.4, delay: index * 0.05 }}
                  >
                    <div className="flex items-center justify-between p-4 bg-white rounded-xl border border-slate-200 hover:shadow-md transition-all duration-300">
                      <div className="flex items-center gap-4">
                        <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                          <FileText className="w-6 h-6 text-blue-600" />
                        </div>
                        <div>
                          <h3 className="font-semibold text-slate-900">{doc.title}</h3>
                          <div className="flex items-center gap-2 mt-1">
                            <Badge variant="outline">
                              {doc.document_type.replace(/_/g, ' ').toUpperCase()}
                            </Badge>
                            <span className="text-sm text-slate-500">
                              {format(new Date(doc.created_date), 'MMM d, yyyy')}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                          <div className={`w-3 h-3 ${getRiskColor(doc.risk_score || 0)} rounded-full mx-auto mb-1`}></div>
                          <span className="text-xs text-slate-500">
                            {getRiskLabel(doc.risk_score || 0)}
                          </span>
                        </div>
                        
                        <div className="text-center">
                          <div className="text-lg font-bold text-red-600">
                            {doc.red_flags?.length || 0}
                          </div>
                          <span className="text-xs text-slate-500">Red Flags</span>
                        </div>
                        
                        <div className="flex gap-2">
                          <Link to={createPageUrl(`Analysis?id=${doc.id}`)}>
                            <Button size="sm" variant="outline" className="gap-1">
                              <Eye className="w-4 h-4" />
                              View
                            </Button>
                          </Link>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            className="gap-1"
                            onClick={() => window.open(doc.file_url, '_blank')}
                          >
                            <Download className="w-4 h-4" />
                            Download
                          </Button>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            className="gap-1 text-red-600 border-red-200 hover:bg-red-50 hover:text-red-700"
                            onClick={() => handleDeleteDocument(doc.id, doc.title)}
                            disabled={deletingId === doc.id}
                          >
                            {deletingId === doc.id ? (
                              <div className="w-4 h-4 animate-spin rounded-full border-2 border-red-600 border-t-transparent" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                            Delete
                          </Button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
